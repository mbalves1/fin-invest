// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                  @id
  email                   String                  @unique
  firstName               String
  lastName                String
  birthday                DateTime?
  isActive                Boolean?
  products                UserInvestments[]
  fixedIncomeInvestments  FixedIncomeInvestment[]
  riskTolerance           String? // Exemplo: 'Conservative', 'Moderate', 'Aggressive'
  investmentGoals         String? // Exemplo: 'retirement', 'compra de imovel', 'education'
  currentPortfolioValue   Float? // Ex: R$ 5000
  investedPortfolioValue  Float? // Ex: R$ 1000
  preferredInvestmentType String? // Exemplo: 'stocks', 'fixed_income', 'real_estate_funds', 'crypto'

  @@map("users")
}

model Product {
  id                Int               @id @default(autoincrement())
  bank              String
  name              String            @default("")
  rateType          String
  investmentDate    DateTime
  dueDate           DateTime
  rate              Float
  initialInvestment Float
  currentValue      Float
  isLiquid          Boolean
  quantity          Int // Quantidade inicial disponível
  quantityRemaining Int? // Quantidade restante disponível
  risk              String? // Exemplo: 'low', 'medium', 'high'
  investmentHorizon String? // Exemplo: 'curto' "short_term", 'médio' mid_term, 'longo prazo' long_term
  investmentType    String? // Exemplo: 'stocks', 'renda fixa', 'imoveis'
  users             UserInvestments[]

  @@map("products")
}

model FixedIncomeInvestment {
  id                String   @id @default(uuid())
  name              String
  issuer            String // Instituição financeira emissora
  type              String // Ex: CDB, LCI, LCA, etc.
  interestRate      Float // Taxa de juros
  interestType      String // Ex: Prefixado, Pós-fixado, Híbrido
  indexer           String? // Ex: CDI, IPCA, Selic (se pós-fixado)
  maturityDate      DateTime // Data de vencimento
  liquidity         String // Ex: Diária, No vencimento
  minimumInvestment Float // Aplicação mínima
  taxation          String // Ex: IR, IOF, Isento
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  investedAmount    Float? // Quantidade investida

  users  UserInvestments[]
  User   User?             @relation(fields: [userId], references: [id])
  userId String?

  @@map("fixed_income_investments")
}

model RealEstateFund {
  id              String            @id @default(uuid())
  name            String
  ticker          String            @unique // Código de negociação (ex: KNRI11)
  category        String // Ex: Tijolo, Papel, Híbrido
  dividendYield   Float // Rendimento por cota
  netWorth        Float // Patrimônio líquido
  lastDividend    Float // Último dividendo pago
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  UserInvestments UserInvestments[]

  @@map("real_estate_funds")
}

model Stock {
  id              String            @id @default(uuid())
  name            String
  ticker          String            @unique // Código de negociação (ex: PETR4)
  sector          String // Setor da empresa
  marketCap       Float // Valor de mercado
  dividendYield   Float? // Rendimento de dividendos (se aplicável)
  lastPrice       Float // Último preço negociado
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  UserInvestments UserInvestments[]

  @@map("stocks")
}

model Cryptocurrency {
  id                String            @id @default(uuid())
  name              String
  symbol            String            @unique // Código da moeda (ex: BTC, ETH)
  marketCap         Float // Capitalização de mercado
  circulatingSupply Float // Quantidade em circulação
  lastPrice         Float // Último preço negociado
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  UserInvestments   UserInvestments[]

  @@map("crypto")
}

model UserInvestments {
  id             String   @id @default(uuid())
  userId         String
  investedAmount Float // Quantidade comprada
  purchasedAt    DateTime @default(now()) // Data da compra

  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  FixedIncomeInvestment FixedIncomeInvestment? @relation(fields: [fixedIncomeId], references: [id])
  fixedIncomeId         String?
  RealEstateFund        RealEstateFund?        @relation(fields: [realEstateFundId], references: [id])
  realEstateFundId      String?
  Stock                 Stock?                 @relation(fields: [stockId], references: [id])
  stockId               String?
  Cryptocurrency        Cryptocurrency?        @relation(fields: [cryptoId], references: [id])
  cryptoId              String?
  Product               Product?               @relation(fields: [productId], references: [id])
  productId             Int?

  @@map("user_investments")
}
