// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String        @id
  email                   String        @unique
  firstName               String
  lastName                String
  birthday                DateTime?
  isActive                Boolean?
  products                UserProduct[]
  riskTolerance           String? // Exemplo: 'low', 'medium', 'high'
  investmentGoals         String? // Exemplo: 'retirement', 'compra de imovel', 'education'
  currentPortfolioValue   Float? // Ex: R$ 5000
  preferredInvestmentType String? // Exemplo: 'stocks', 'renda fixa', 'imoveis'

  @@map("users")
}

model Product {
  id                Int           @id @default(autoincrement())
  bank              String
  name              String        @default("")
  rateType          String
  investmentDate    DateTime
  dueDate           DateTime
  rate              Float
  initialInvestment Float
  currentValue      Float
  isLiquid          Boolean
  quantity          Int // Quantidade inicial disponível
  quantityRemaining Int? // Quantidade restante disponível
  risk              String? // Exemplo: 'low', 'medium', 'high'
  investmentHorizon String? // Exemplo: 'curto' "short_term", 'médio' mid_term, 'longo prazo' long_term
  investmentType    String? // Exemplo: 'stocks', 'renda fixa', 'imoveis'
  users             UserProduct[]

  @@map("products")
}

model UserProduct {
  id          Int      @id @default(autoincrement())
  userId      String
  productId   Int
  quantity    Int // Quantidade comprada
  purchasedAt DateTime @default(now()) // Data da compra

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("user_products")
}
